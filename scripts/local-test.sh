#!/bin/bash

# Erik-VPN Local Testing Script
# VLESS + Reality Local Prototype
# Version: 1.0

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
LOG_FILE="$PROJECT_DIR/logs/local-test.log"

# Create logs directory if it doesn't exist
mkdir -p "$PROJECT_DIR/logs"

# Logging function
log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

print_banner() {
    echo -e "${PURPLE}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë                  ERIK-VPN LOCAL TESTING                     ‚ïë
‚ïë                   VLESS + Reality                           ‚ïë
‚ïë                                                              ‚ïë
‚ïë    üß™  –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞                     ‚ïë
‚ïë    üî¨  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤                            ‚ïë
‚ïë    üìä  –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π                               ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Check prerequisites
check_prerequisites() {
    log "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...${NC}"

    # Check if we're in the right directory
    if [ ! -f "$PROJECT_DIR/docker-compose.yml" ]; then
        log "${RED}‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ Erik-VPN${NC}"
        exit 1
    fi

    # Check if Docker is installed and running
    if ! command -v docker >/dev/null 2>&1; then
        log "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º${NC}"
        exit 1
    fi

    if ! docker info >/dev/null 2>&1; then
        log "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º${NC}"
        exit 1
    fi

    # Check if docker-compose is available
    if ! command -v docker-compose >/dev/null 2>&1 && ! docker compose version >/dev/null 2>&1; then
        log "${RED}‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        exit 1
    fi

    # Determine docker-compose command
    if command -v docker-compose >/dev/null 2>&1; then
        DOCKER_COMPOSE="docker-compose"
    else
        DOCKER_COMPOSE="docker compose"
    fi

    log "${GREEN}‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã${NC}"
}

# Setup environment
setup_environment() {
    log "${BLUE}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...${NC}"

    cd "$PROJECT_DIR"

    # Create .env file if it doesn't exist
    if [ ! -f .env ]; then
        if [ -f env.example ]; then
            cp env.example .env
            log "üìÑ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ env.example"
        else
            log "${RED}‚ùå env.example –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
            exit 1
        fi
    fi

    # Update .env for local testing
    sed -i.bak 's/your-server-ip-or-domain.com/localhost/' .env
    sed -i.bak 's/your-secure-password-here/test123456/' .env
    sed -i.bak 's/your-random-session-secret-here/test-session-secret-for-local-development/' .env
    sed -i.bak 's/grafana-admin-password/test123456/' .env

    log "${GREEN}‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è${NC}"
}

# Pull Docker images
pull_images() {
    log "${BLUE}üê≥ –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...${NC}"

    cd "$PROJECT_DIR"

    # Pull main service images
    $DOCKER_COMPOSE pull xray-ui

    log "${GREEN}‚úÖ Docker –æ–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã${NC}"
}

# Start services
start_services() {
    log "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ Erik-VPN...${NC}"

    cd "$PROJECT_DIR"

    # Stop any existing services
    $DOCKER_COMPOSE down >/dev/null 2>&1 || true

    # Start main services
    $DOCKER_COMPOSE up -d xray-ui

    # Wait for services to be ready
    log "${BLUE}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    sleep 15

    log "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
}

# Test services
test_services() {
    log "${BLUE}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"

    # Test 3X-UI panel
    log "${CYAN}üéõÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ 3X-UI...${NC}"

    for i in {1..30}; do
        if curl -s -f http://localhost:2053 >/dev/null 2>&1; then
            log "${GREEN}‚úÖ 3X-UI –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:2053${NC}"
            break
        elif [ $i -eq 30 ]; then
            log "${RED}‚ùå 3X-UI –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫${NC}"
            return 1
        else
            sleep 2
        fi
    done

    # Test container health
    log "${CYAN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"

    if $DOCKER_COMPOSE ps | grep -q "Up"; then
        log "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç${NC}"
    else
        log "${RED}‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã${NC}"
        $DOCKER_COMPOSE ps
        return 1
    fi

    # Check logs for errors
    log "${CYAN}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫...${NC}"

    if $DOCKER_COMPOSE logs xray-ui | grep -i "error\|fail\|panic" | head -5; then
        log "${YELLOW}‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö (—Å–º. –≤—ã—à–µ)${NC}"
    else
        log "${GREEN}‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ${NC}"
    fi

    log "${GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
}

# Test network connectivity
test_network() {
    log "${BLUE}üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...${NC}"

    # Test if ports are open
    log "${CYAN}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...${NC}"

    ports=("2053" "443" "80" "8080")

    for port in "${ports[@]}"; do
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            log "${GREEN}‚úÖ –ü–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç${NC}"
        else
            log "${YELLOW}‚ö†Ô∏è  –ü–æ—Ä—Ç $port –Ω–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)${NC}"
        fi
    done

    # Test DNS resolution
    log "${CYAN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...${NC}"

    test_domains=("microsoft.com" "apple.com" "cloudflare.com")

    for domain in "${test_domains[@]}"; do
        if nslookup "$domain" >/dev/null 2>&1; then
            log "${GREEN}‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è $domain —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
        else
            log "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è $domain${NC}"
        fi
    done

    log "${GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
}

# Generate test configuration
generate_test_config() {
    log "${BLUE}üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VLESS + Reality...${NC}"

    # Wait a bit more for 3X-UI to be fully ready
    sleep 10

    log "${CYAN}üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 3X-UI:${NC}"
    echo
    echo -e "${YELLOW}1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: ${GREEN}http://localhost:2053${NC}"
    echo -e "${YELLOW}2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:${NC}"
    echo -e "   ${CYAN}–õ–æ–≥–∏–Ω: ${GREEN}admin${NC}"
    echo -e "   ${CYAN}–ü–∞—Ä–æ–ª—å: ${GREEN}test123456${NC}"
    echo
    echo -e "${YELLOW}3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Inbound —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:${NC}"
    echo -e "   ${CYAN}Protocol: ${GREEN}VLESS${NC}"
    echo -e "   ${CYAN}Port: ${GREEN}443${NC}"
    echo -e "   ${CYAN}Flow: ${GREEN}xtls-rprx-vision${NC}"
    echo -e "   ${CYAN}Transport: ${GREEN}TCP${NC}"
    echo -e "   ${CYAN}TLS: ${GREEN}Reality${NC}"
    echo -e "   ${CYAN}Dest: ${GREEN}microsoft.com:443${NC}"
    echo -e "   ${CYAN}Server Names: ${GREEN}microsoft.com${NC}"
    echo
    echo -e "${YELLOW}4. –î–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å Flow: ${GREEN}xtls-rprx-vision${NC}"
    echo

    log "${GREEN}‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã${NC}"
}

# Performance test
performance_test() {
    log "${BLUE}üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...${NC}"

    # Test memory usage
    log "${CYAN}üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:${NC}"
    docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" | head -10

    # Test container startup time
    log "${CYAN}‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞...${NC}"

    start_time=$(date +%s)
    $DOCKER_COMPOSE restart xray-ui >/dev/null 2>&1

    # Wait for service to be ready again
    for i in {1..30}; do
        if curl -s -f http://localhost:2053 >/dev/null 2>&1; then
            end_time=$(date +%s)
            startup_time=$((end_time - start_time))
            log "${GREEN}‚úÖ –í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${startup_time} —Å–µ–∫—É–Ω–¥${NC}"
            break
        elif [ $i -eq 30 ]; then
            log "${RED}‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞${NC}"
            return 1
        else
            sleep 2
        fi
    done

    log "${GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
}

# Cleanup function
cleanup() {
    log "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"

    cd "$PROJECT_DIR"

    # Stop services
    $DOCKER_COMPOSE down

    # Restore original .env file if backup exists
    if [ -f .env.bak ]; then
        mv .env.bak .env
        log "üìÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª"
    fi

    log "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# Generate test report
generate_report() {
    log "${BLUE}üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...${NC}"

    report_file="$PROJECT_DIR/logs/test-report-$(date +%Y%m%d-%H%M%S).md"

    cat > "$report_file" << EOF
# Erik-VPN Local Test Report

**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**: $(date '+%Y-%m-%d %H:%M:%S')
**–í–µ—Ä—Å–∏—è**: VLESS + Reality v2.0

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 3X-UI –ø–∞–Ω–µ–ª–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
- DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ

### üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $(docker stats --no-stream --format "{{.MemUsage}}" erik-vpn-3x-ui 2>/dev/null || echo "N/A")
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: $(docker stats --no-stream --format "{{.CPUPerc}}" erik-vpn-3x-ui 2>/dev/null || echo "N/A")

### üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
- **3X-UI Panel**: http://localhost:2053
- **–õ–æ–≥–∏–Ω**: admin
- **–ü–∞—Ä–æ–ª—å**: test123456

### üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VLESS + Reality –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞–Ω–µ–ª—å
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
3. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ VDS —Å–µ—Ä–≤–µ—Ä–µ
4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

### üìã –õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ñ–∞–π–ª–µ: \`$LOG_FILE\`

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º local-test.sh*
EOF

    log "${GREEN}‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file${NC}"
}

# Print final status
print_final_status() {
    echo
    echo -e "${GREEN}üéâ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Erik-VPN –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    echo
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                      –°–¢–ê–¢–£–° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø                    ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
    echo -e "${CYAN}üéõÔ∏è  3X-UI –ü–∞–Ω–µ–ª—å: ${GREEN}http://localhost:2053${NC}"
    echo -e "${CYAN}üë§ –õ–æ–≥–∏–Ω: ${GREEN}admin${NC}"
    echo -e "${CYAN}üîë –ü–∞—Ä–æ–ª—å: ${GREEN}test123456${NC}"
    echo
    echo -e "${CYAN}üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    $DOCKER_COMPOSE ps
    echo
    echo -e "${CYAN}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "   ${YELLOW}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: ${GREEN}docker-compose logs -f xray-ui${NC}"
    echo -e "   ${YELLOW}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ${GREEN}docker-compose restart${NC}"
    echo -e "   ${YELLOW}–û—Å—Ç–∞–Ω–æ–≤–∫–∞: ${GREEN}docker-compose down${NC}"
    echo
    echo -e "${CYAN}üìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo -e "   ${YELLOW}1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VLESS + Reality –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏${NC}"
    echo -e "   ${YELLOW}2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–≤${NC}"
    echo -e "   ${YELLOW}3. –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ docs/client-setup.md${NC}"
    echo
    echo -e "${PURPLE}üêõ –õ–æ–≥–∏: ${GREEN}$LOG_FILE${NC}"
    echo
}

# Trap for cleanup on exit
trap cleanup EXIT

# Main function
main() {
    print_banner

    log "${BLUE}üß™ –ù–∞—á–∞–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Erik-VPN...${NC}"

    check_prerequisites
    setup_environment
    pull_images
    start_services
    test_services
    test_network
    generate_test_config
    performance_test
    generate_report
    print_final_status

    log "${GREEN}‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
}

# Handle script arguments
case "${1:-}" in
    --cleanup-only)
        cleanup
        exit 0
        ;;
    --help|-h)
        echo "Erik-VPN Local Testing Script"
        echo "Usage: $0 [--cleanup-only] [--help]"
        echo ""
        echo "Options:"
        echo "  --cleanup-only    –¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        echo "  --help, -h        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
