#!/bin/bash

# =================================================================
# ERIK-VPN AUTOMATED DEPLOYMENT SCRIPT
# =================================================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ VPN —Å–µ—Ä–≤–µ—Ä–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_warning "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ root. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sudo."
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
detect_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
        exit 1
    fi
    print_status "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS $VER"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    if command -v docker &> /dev/null; then
        print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi

    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."

    case "$OS" in
        "Ubuntu"|"Debian GNU/Linux")
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux")
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        *)
            print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OS"
            print_status "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/get-docker/"
            exit 1
            ;;
    esac

    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -aG docker $USER

    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose (–µ—Å–ª–∏ –Ω–µ—Ç)
install_docker_compose() {
    if command -v docker-compose &> /dev/null; then
        print_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi

    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP
get_external_ip() {
    EXTERNAL_IP=$(curl -s http://ipv4.icanhazip.com 2>/dev/null || curl -s http://checkip.amazonaws.com 2>/dev/null || echo "")
    if [[ -z "$EXTERNAL_IP" ]]; then
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP"
        read -p "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: " EXTERNAL_IP
    else
        print_status "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–Ω–µ—à–Ω–∏–π IP: $EXTERNAL_IP"
        read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç IP? (y/n) [y]: " -r confirm
        confirm=${confirm:-y}
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            read -p "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: " EXTERNAL_IP
        fi
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_config() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    if [[ ! -f .env ]]; then
        cp env.example .env
        print_status "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
    fi

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IP –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    sed -i "s/WG_HOST=your-server-ip/WG_HOST=$EXTERNAL_IP/g" .env

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    ADMIN_PASSWORD=$(openssl rand -base64 12 2>/dev/null || head /dev/urandom | tr -dc A-Za-z0-9 | head -c 12)
    sed -i "s/ADMIN_PASSWORD=your-secure-password/ADMIN_PASSWORD=$ADMIN_PASSWORD/g" .env

    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    print_status "–ü–∞—Ä–æ–ª—å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: $ADMIN_PASSWORD"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
create_directories() {
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    mkdir -p data logs monitoring/grafana/provisioning
    sudo chown -R $USER:$USER data logs
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
configure_firewall() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."

    if command -v ufw &> /dev/null; then
        sudo ufw allow 51820/udp comment "WireGuard"
        sudo ufw allow 51821/tcp comment "WireGuard Web UI"
        print_success "UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    elif command -v firewall-cmd &> /dev/null; then
        sudo firewall-cmd --permanent --add-port=51820/udp
        sudo firewall-cmd --permanent --add-port=51821/tcp
        sudo firewall-cmd --reload
        print_success "Firewalld –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_warning "–§–∞–π—Ä–≤–æ–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç—ã 51820/udp –∏ 51821/tcp –æ—Ç–∫—Ä—ã—Ç—ã"
    fi
}

# –í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding
enable_ip_forwarding() {
    print_status "–í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding..."
    echo 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf
    sudo sysctl -p
    print_success "IP forwarding –≤–∫–ª—é—á–µ–Ω"
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_containers() {
    print_status "–ó–∞–ø—É—Å–∫ VPN —Å–µ—Ä–≤–µ—Ä–∞..."
    docker-compose up -d
    print_success "VPN —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
    sleep 5

    if docker ps | grep -q erik-vpn; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä erik-vpn —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—É—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        docker-compose logs
        exit 1
    fi
}

# –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    print_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo
    echo "==================================================================="
    echo "üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–®–ï–ú VPN –°–ï–†–í–ï–†–ï"
    echo "==================================================================="
    echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://$EXTERNAL_IP:51821"
    echo "üîë –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞: $ADMIN_PASSWORD"
    echo "üîå WireGuard –ø–æ—Ä—Ç: 51820/udp"
    echo "üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Ä—Ç: 51821/tcp"
    echo
    echo "==================================================================="
    echo "üì± –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò"
    echo "==================================================================="
    echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    echo "2. –í–æ–π–¥–∏—Ç–µ —Å –ø–∞—Ä–æ–ª–µ–º: $ADMIN_PASSWORD"
    echo "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo "4. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    echo "5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –∫–ª–∏–µ–Ω—Ç—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    echo
    echo "==================================================================="
    echo "üìö –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´"
    echo "==================================================================="
    echo "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose logs -f"
    echo "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: docker-compose down"
    echo "‚Ä¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: docker-compose up -d"
    echo "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo
    print_warning "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "==================================================================="
    echo "üöÄ ERIK-VPN AUTOMATIC DEPLOYMENT"
    echo "==================================================================="
    echo

    check_root
    detect_os
    install_docker
    install_docker_compose
    get_external_ip
    setup_config
    create_directories
    configure_firewall
    enable_ip_forwarding
    start_containers
    check_status
    show_final_info
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
