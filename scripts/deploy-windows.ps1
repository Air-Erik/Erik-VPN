# Erik-VPN Windows Deployment Script
# VLESS + Reality with 3X-UI Panel –¥–ª—è Windows
# Version: 2.0

param(
    [switch]$SkipDocker,
    [switch]$Help
)

# Colors for output
$colors = @{
    Red    = "Red"
    Green  = "Green"
    Yellow = "Yellow"
    Blue   = "Blue"
    Purple = "Magenta"
    Cyan   = "Cyan"
}

function Write-ColoredOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $colors[$Color]
}

function Write-Banner {
    Write-ColoredOutput @"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë                     ERIK-VPN v2.0 –¥–ª—è Windows               ‚ïë
‚ïë                   VLESS + Reality Setup                     ‚ïë
‚ïë                                                              ‚ïë
‚ïë    üõ°Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º                 ‚ïë
‚ïë    üöÄ  –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è                         ‚ïë
‚ïë    üéõÔ∏è  –£–¥–æ–±–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3X-UI                     ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"@ -Color "Purple"
}

function Show-Help {
    Write-ColoredOutput @"
Erik-VPN Windows Deployment Script

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    ./deploy-windows.ps1 [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ü–ê–†–ê–ú–ï–¢–†–´:
    -SkipDocker    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É Docker (–µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    -Help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    ./deploy-windows.ps1
    ./deploy-windows.ps1 -SkipDocker

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Windows 10/11 Pro/Enterprise —Å Hyper-V
    - Docker Desktop –¥–ª—è Windows
    - WSL2 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    - PowerShell 5.1+

"@ -Color "Cyan"
}

function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Test-Prerequisites {
    Write-ColoredOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..." -Color "Blue"

    # Check Windows version
    $winVersion = [System.Environment]::OSVersion.Version
    if ($winVersion.Major -lt 10) {
        Write-ColoredOutput "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Windows 10 –∏–ª–∏ –≤—ã—à–µ" -Color "Red"
        exit 1
    }

    # Check PowerShell version
    $psVersion = $PSVersionTable.PSVersion
    if ($psVersion.Major -lt 5) {
        Write-ColoredOutput "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è PowerShell 5.1 –∏–ª–∏ –≤—ã—à–µ" -Color "Red"
        exit 1
    }

    # Check if running as administrator
    if (-not (Test-Administrator)) {
        Write-ColoredOutput "‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏" -Color "Yellow"
    }

    Write-ColoredOutput "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã" -Color "Green"
}

function Test-Docker {
    if ($SkipDocker) {
        Write-ColoredOutput "‚è≠Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –ø—Ä–æ–ø—É—â–µ–Ω–∞" -Color "Yellow"
        return
    }

    Write-ColoredOutput "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..." -Color "Blue"

    # Check if Docker is installed
    try {
        $dockerVersion = docker --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColoredOutput "‚úÖ Docker –Ω–∞–π–¥–µ–Ω: $dockerVersion" -Color "Green"
        } else {
            throw "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    } catch {
        Write-ColoredOutput @"
‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH

–£–°–¢–ê–ù–û–í–ò–¢–ï DOCKER DESKTOP:
1. –°–∫–∞—á–∞–π—Ç–µ —Å https://www.docker.com/products/docker-desktop
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop
3. –í–∫–ª—é—á–∏—Ç–µ WSL2 backend (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop
5. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
6. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞

"@ -Color "Red"
        exit 1
    }

    # Check if Docker is running
    try {
        docker info >$null 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColoredOutput "‚úÖ Docker –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç" -Color "Green"
        } else {
            throw "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        }
    } catch {
        Write-ColoredOutput @"
‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω

–ó–ê–ü–£–°–¢–ò–¢–ï DOCKER:
1. –û—Ç–∫—Ä–æ–π—Ç–µ Docker Desktop
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–¥–ø–∏—Å–∏ "Docker Desktop is running"
3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞

"@ -Color "Red"
        exit 1
    }

    # Check Docker Compose
    try {
        $composeVersion = docker-compose --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColoredOutput "‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω: $composeVersion" -Color "Green"
        } else {
            # Try docker compose (newer syntax)
            docker compose version >$null 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-ColoredOutput "‚úÖ Docker Compose (v2) –Ω–∞–π–¥–µ–Ω" -Color "Green"
            } else {
                throw "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        }
    } catch {
        Write-ColoredOutput "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ Docker Desktop –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏." -Color "Red"
        exit 1
    }
}

function Initialize-Project {
    Write-ColoredOutput "üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞..." -Color "Blue"

    $projectRoot = Split-Path -Parent $PSScriptRoot
    Set-Location $projectRoot

    # Create necessary directories
    $directories = @(
        "data\3x-ui",
        "certs",
        "logs\xray",
        "logs\nginx",
        "nginx\conf.d",
        "monitoring",
        "monitoring\grafana\dashboards",
        "monitoring\grafana\datasources",
        "fail2ban"
    )

    foreach ($dir in $directories) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-ColoredOutput "üìÅ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: $dir" -Color "Cyan"
        }
    }

    Write-ColoredOutput "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞" -Color "Green"
}

function Initialize-Environment {
    Write-ColoredOutput "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -Color "Blue"

    # Copy .env file if it doesn't exist
    if (-not (Test-Path ".env")) {
        if (Test-Path "env.example") {
            Copy-Item "env.example" ".env"
            Write-ColoredOutput "üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ env.example" -Color "Cyan"
        } else {
            Write-ColoredOutput "‚ùå –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω" -Color "Red"
            exit 1
        }
    }

    # Generate random passwords for Windows
    $adminPassword = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 12 | ForEach-Object {[char]$_})
    $sessionSecret = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 32 | ForEach-Object {[char]$_})
    $grafanaPassword = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 12 | ForEach-Object {[char]$_})

    # Update .env file
    $envContent = Get-Content ".env"
    $envContent = $envContent -replace "your-secure-password-here", $adminPassword
    $envContent = $envContent -replace "your-random-session-secret-here", $sessionSecret
    $envContent = $envContent -replace "grafana-admin-password", $grafanaPassword
    $envContent = $envContent -replace "your-server-ip-or-domain.com", "localhost"
    $envContent | Set-Content ".env"

    Write-ColoredOutput "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞" -Color "Green"
    Write-ColoredOutput "üìã –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:" -Color "Yellow"
    Write-ColoredOutput "   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 3X-UI: admin / $adminPassword" -Color "Cyan"
    Write-ColoredOutput "   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Grafana: admin / $grafanaPassword" -Color "Cyan"

    # Save credentials to file
    $credentialsPath = "logs\credentials.txt"
    @"
Erik-VPN –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(Get-Date)

3X-UI Panel: http://localhost:2053
–õ–æ–≥–∏–Ω: admin
–ü–∞—Ä–æ–ª—å: $adminPassword

Grafana: http://localhost:3000
–õ–æ–≥–∏–Ω: admin
–ü–∞—Ä–æ–ª—å: $grafanaPassword

–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á: $sessionSecret
"@ | Out-File -FilePath $credentialsPath -Encoding UTF8

    Write-ColoredOutput "üíæ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $credentialsPath" -Color "Green"
}

function Start-Services {
    Write-ColoredOutput "üöÄ –ó–∞–ø—É—Å–∫ Erik-VPN —Å–µ—Ä–≤–∏—Å–æ–≤..." -Color "Blue"

    # Check which docker-compose command to use
    $dockerComposeCmd = "docker-compose"
    try {
        docker-compose --version >$null 2>&1
        if ($LASTEXITCODE -ne 0) {
            $dockerComposeCmd = "docker compose"
        }
    } catch {
        $dockerComposeCmd = "docker compose"
    }

    # Pull latest images
    Write-ColoredOutput "üì• –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..." -Color "Cyan"
    Invoke-Expression "$dockerComposeCmd pull xray-ui"

    # Start services
    Write-ColoredOutput "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." -Color "Cyan"
    Invoke-Expression "$dockerComposeCmd up -d xray-ui"

    if ($LASTEXITCODE -eq 0) {
        Write-ColoredOutput "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" -Color "Green"
    } else {
        Write-ColoredOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤" -Color "Red"
        Invoke-Expression "$dockerComposeCmd logs"
        exit 1
    }

    # Wait for services to start
    Write-ColoredOutput "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..." -Color "Blue"
    Start-Sleep -Seconds 30

    # Test if 3X-UI is accessible
    for ($i = 1; $i -le 10; $i++) {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:2053" -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-ColoredOutput "‚úÖ 3X-UI –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞" -Color "Green"
                break
            }
        } catch {
            if ($i -eq 10) {
                Write-ColoredOutput "‚ö†Ô∏è  3X-UI –ø–∞–Ω–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏." -Color "Yellow"
            } else {
                Start-Sleep -Seconds 3
            }
        }
    }
}

function Show-FinalInfo {
    $envContent = Get-Content ".env"
    $adminPassword = ($envContent | Where-Object { $_ -match "ADMIN_PASSWORD=" }) -replace "ADMIN_PASSWORD=", ""

    Write-ColoredOutput "" -Color "White"
    Write-ColoredOutput "üéâ Erik-VPN —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Windows!" -Color "Green"
    Write-ColoredOutput "" -Color "White"
    Write-ColoredOutput "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -Color "Purple"
    Write-ColoredOutput "‚ïë                    –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–£–ü–ï                     ‚ïë" -Color "Purple"
    Write-ColoredOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -Color "Purple"
    Write-ColoredOutput "" -Color "White"
    Write-ColoredOutput "üéõÔ∏è  –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3X-UI:" -Color "Cyan"
    Write-ColoredOutput "   URL: http://localhost:2053" -Color "Green"
    Write-ColoredOutput "   –õ–æ–≥–∏–Ω: admin" -Color "Green"
    Write-ColoredOutput "   –ü–∞—Ä–æ–ª—å: $adminPassword" -Color "Green"
    Write-ColoredOutput "" -Color "White"
    Write-ColoredOutput "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:" -Color "Cyan"
    Write-ColoredOutput "   Android: Hiddify, v2rayNG, Fair VPN" -Color "Green"
    Write-ColoredOutput "   iOS: FoXray, Shadowrocket, Hiddify" -Color "Green"
    Write-ColoredOutput "   Windows: Hiddify, v2rayN, Qv2ray" -Color "Green"
    Write-ColoredOutput "" -Color "White"
    Write-ColoredOutput "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -Color "Cyan"
    Write-ColoredOutput "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart" -Color "Green"
    Write-ColoredOutput "   –õ–æ–≥–∏: docker-compose logs -f" -Color "Green"
    Write-ColoredOutput "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down" -Color "Green"
    Write-ColoredOutput "" -Color "White"
    Write-ColoredOutput "‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -Color "Yellow"
    Write-ColoredOutput "   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ http://localhost:2053" -Color "White"
    Write-ColoredOutput "   2. –í–æ–π–¥–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—è admin / $adminPassword" -Color "White"
    Write-ColoredOutput "   3. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VLESS + Reality" -Color "White"
    Write-ColoredOutput "   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" -Color "White"
    Write-ColoredOutput "" -Color "White"
    Write-ColoredOutput "üíæ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: logs\credentials.txt" -Color "Purple"
    Write-ColoredOutput "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: .\docs\" -Color "Purple"
    Write-ColoredOutput "" -Color "White"
}

# Main execution
if ($Help) {
    Show-Help
    exit 0
}

Write-Banner

try {
    Test-Prerequisites
    Test-Docker
    Initialize-Project
    Initialize-Environment
    Start-Services
    Show-FinalInfo
} catch {
    Write-ColoredOutput "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $_" -Color "Red"
    exit 1
}

Write-ColoredOutput "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Erik-VPN –Ω–∞ Windows –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" -Color "Green"
